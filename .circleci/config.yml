version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            curl https://kvdb.io/TJj3g2oMjrWdsGy7mq8DSj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'MIGRATION_OK'
            if(( migrations==1 )); 
            then
              cd ~/project/backend   
              npm install       
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
              cd frontend
              npm install
              npm run test
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan the frontend for vulnerabilities
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan the backend for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"              
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo [web] > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt 
      - destroy-environment 
 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11     
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:57:75:d5:b2:b1:ba:2b:ac:1c:78:99:64:d9:f9:32"]
    
      - attach_workspace:
          at: ~/
      
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - revert-migrations

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm cache clean -f
            sudo npm install -g n
            sudo n stable
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdn.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/TJj3g2oMjrWdsGy7mq8DSj/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi             
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum install -y tar gzip
            yum install -y unzip      
      - run:
          name: Install dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - run:
          name: Get backend url
          workding_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            npm install -g npm
            npm install oauth2
            npm install webpack
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:57:75:d5:b2:b1:ba:2b:ac:1c:78:99:64:d9:f9:32"]
      - attach_workspace:
          at: ~/   
      - restore_cache:
          keys:
            - build-backend                
      - run: 
          name: View content of inventory.txt
          command: cat ~/project/.circleci/ansible/inventory.txt                      
      - run:
          name: Install dependencies
          command: |
            apk add --update curl rsync openssh
            ansible --version
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
            aws --version
      - run:
          name: deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            # cat inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            # ansible-playbook -i inventory.txt deploy-backend.yml
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml -vv 

      - destroy-environment
      - revert-migrations

  smoke-test:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt update
              sudo apt upgrade -y
              sudo apt install -y curl
              sudo apt install -y awscli
              aws --version
        - run:
            name: Backend smoke test.
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                echo SUCCESS
                exit 0
              else
                echo FAIL
                exit 1
              fi
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
              echo ${URL}
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
        - destroy-environment
        - revert-migrations

  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum update -y
              yum install -y curl
              aws --version
        - run:
            name: Store old WorkflowID
            command: |
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              echo OldWorkflowID: $OldWorkflowID
              # Push it to kvdb.io
              curl https://kvdb.io/TJj3g2oMjrWdsGy7mq8DSj/oldworkflowid -d "$OldWorkflowID"
        - run:
            name: Update cloudfront distribution
            command: |
              # Change the initial stack name, as applicable to you
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
        - destroy-environment
        - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip           
      - attach_workspace:
          at: .     
      - run:
          name: Remove old stacks and files
          command: |
            #get OldWorkflowID
            curl https://kvdb.io/TJj3g2oMjrWdsGy7mq8DSj/oldworkflowid >> ~/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: ${OldWorkflowID}
            
            export CurrentWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo CurrentWorkflowID:"${CurrentWorkflowID}"
            
            echo "udapeople-${OldWorkflowID}"
            echo "backend-${OldWorkflowID}"
            echo "frontend-${OldWorkflowID}"
            
            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
                echo "i am in"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
             else
                echo "i am out"
            fi   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [deploy-infrastructure, configure-infrastructure]
      - deploy-frontend:
          requires: [deploy-infrastructure, configure-infrastructure, run-migrations]
      - deploy-backend:
          requires: [deploy-infrastructure, configure-infrastructure, run-migrations, deploy-frontend]
      - smoke-test:
          requires: [run-migrations, deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]